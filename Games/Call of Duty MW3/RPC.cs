using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using PS3Lib;

namespace ProjectRunningFox.Games.Call_of_Duty_MW3
{
    class RPC
    {
        public static uint ProcessID;
        public static PS3API PS3 = new PS3API();
       
        public static void GetMemoryR(uint Address, ref byte[] Bytes)
        {
            PS3.GetMemory(Address, Bytes);
        }
        public static byte[] ReverseBytes(byte[] inArray)
        {
            Array.Reverse(inArray);
            return inArray;
        }
        public static  byte[] MakeBl(uint callAddr, uint addrToBlTo)
        {
            byte[] instruction = new byte[4];
            uint addr_t = (uint)(((int)addrToBlTo - (int)callAddr) + 1);
            if ((int)addrToBlTo > (int)callAddr) instruction[3] = 0x48;
            else
            {
                instruction[3] = 0x4B;
                addr_t = (uint)(0x1000000 - ((int)callAddr - (int)addrToBlTo) + 1);
            }
            byte[] addr = BitConverter.GetBytes(addr_t);
            for (int i = 0; i < 3; i++)
            {
                instruction[i] = addr[i];
            }
            Array.Reverse(instruction);
            return instruction;
        }
        public static void CallFunc(uint func_addr, uint param1 = 0, uint param2 = 0, uint param3 = 0, uint param4 = 0, uint param5 = 0)
        {
            byte[] par1 = BitConverter.GetBytes(param1);
            byte[] par2 = BitConverter.GetBytes(param2);
            byte[] par3 = BitConverter.GetBytes(param3);
            byte[] par4 = BitConverter.GetBytes(param4);
            byte[] par5 = BitConverter.GetBytes(param5);
            Array.Reverse(par1);
            Array.Reverse(par2);
            Array.Reverse(par3);
            Array.Reverse(par4);
            Array.Reverse(par5);
            Form1.PS3.SetMemory(0x523B10, par1);
            Form1.PS3.SetMemory(0x523B14, par2);
            Form1.PS3.SetMemory(0x523B18, par3);
            Form1.PS3.SetMemory(0x523B1C, par4);
            Form1.PS3.SetMemory(0x523B20, par5);
            Form1.PS3.SetMemory(0x3BCA04, MakeBl(0x3BCA04, func_addr));
            Form1.PS3.SetMemory(0x1DB1244, new byte[] { 0x00, 0x00, 0x00, 0x01 });
            System.Threading.Thread.Sleep(10);
        }
        public static void RPC_Enable_124()
        {
            Form1.PS3.SetMemory(0x523B10, new byte[2175]);
            Form1.PS3.SetMemory(0x18BE6C, new byte[] { 0x60, 0x00, 0x00, 0x00 });
            Form1.PS3.SetMemory(0x3BC9CC, new byte[] { 0x60, 0x00, 0x00, 0x00 });
            Form1.PS3.SetMemory(0x18BE74, new byte[] { 0x48, 0x00, 0x00, 0x68 });
            Form1.PS3.SetMemory(0x1DB1244, new byte[4]);
            Form1.PS3.SetMemory(0x114AE64, new byte[4]);
            Form1.PS3.SetMemory(0x3BC9E4, new byte[] { 0x41, 0x82, 0x02, 0x20, 0x3D, 0x00, 0x00, 0x52, 0x80, 0x68, 0x3B, 0x10, 0x80, 0x88, 0x3B, 0x14, 0x80, 0xA8, 0x3B, 0x18, 0x80, 0xC8, 0x3B, 0x1C, 0x80, 0xE8, 0x3B, 0x20, 0x39, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x1D, 0x3C, 0x80, 0x01, 0x15, 0x90, 0x64, 0xAE, 0x64, 0x38, 0x80, 0x00, 0x00, 0x3C, 0x60, 0x01, 0xDB, 0x90, 0x83, 0x12, 0x44, 0x48, 0x00, 0x01, 0xE8, 0x4E, 0x80, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00 });
        }
        public static void WriteSingle(uint address, float input)
        {
            byte[] array = new byte[4];
            BitConverter.GetBytes(input).CopyTo(array, 0);
            Array.Reverse(array, 0, 4);
            PS3.SetMemory(address, array);
        }

        public static void WriteSingle(uint address, float[] input)
        {
            int length = input.Length;
            byte[] array = new byte[length * 4];
            for (int i = 0; i < length; i++)
            {
                ReverseBytes(BitConverter.GetBytes(input[i])).CopyTo(array, (int)(i * 4));
            }
            PS3.SetMemory(address, array);
        }
        public static uint str_pointer(string str)
        {
            uint addr = 0x523B30;
            byte[] check = new byte[1];
            uint i;
            for (i = 0; i < 5; i++)
            {
                PS3TMAPI.ProcessGetMemory(0, PS3TMAPI.UnitType.PPU, ProcessID, 0xFFFFFFFF, addr, ref check);
                if (check[0] == 0x00) break;
                if (i == 4)
                {
                    i = 0;
                    break;
                }
            }
            addr = (0x523B30 + (i * 0x68));
            Form1.PS3.SetMemory(addr, new byte[0x68]);
            Form1.PS3.SetMemory(addr, Encoding.UTF8.GetBytes(str));
            return addr;
        }
        public static void SV_GameSendServerCommand(int client, string command)
        {
            CallFunc(0x228FA8, (uint)client, 0, str_pointer(command));
        }
       
        public static void iPrintln(int client, string Text)
        {
            SV_GameSendServerCommand(client, "c \"" + Text + "\"");
            Thread.Sleep(20);
        }
        public static void iPrintlnBold(int client, string Text)
        {
            SV_GameSendServerCommand(client, "f \"" + Text + "\"");
            Thread.Sleep(20);
        }
      
      
        public static uint GetFuncReturn()
        {
            byte[] ret = new byte[4];
            GetMemoryR(0x114AE64, ref ret);
            Array.Reverse(ret);
            return BitConverter.ToUInt32(ret, 0);
        }
    
        public static void DestroyAll()
        {
            Byte[] clear = new Byte[0xB4 * 1024];
            PS3.SetMemory(0xF0E10C, clear);
        }
        private static byte[] GetMemory(uint offset, int length)
        {
            byte[] array = new byte[length];
            PS3.GetMemory(offset, array);
            return array;
        }
        private static byte[] ReadBytes(uint address, int length)
        {
            return GetMemory(address, length);
        }
        public static Single[] ReadSingle(uint address, int length)
        {
            byte[] mem = ReadBytes(address, length * 4);
            Array.Reverse(mem);
            float[] numArray = new float[length];
            for (int index = 0; index < length; ++index)
                numArray[index] = BitConverter.ToSingle(mem, (length - 1 - index) * 4);
            return numArray;
        }
       
    }
}